{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "ElasticSearch Template",
  "Parameters" : {
    "DomainName" : {
      "Type" : "String",
      "Description" : "Domain name for the ElasticSearch instance"
    },
    "ESInstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m3.medium.elasticsearch"
    },
    "ESPublisherLambdaS3Bucket" : {
      "Type" : "String"
    },
    "ESPublisherLambdaS3Object" : {
      "Type" : "String"
    },
    "KinesisShardCount" : {
      "Type" : "Number"
    },
    "ESUseEBS" : {
      "Type" : "String"
    },
    "ESEBSSize" : {
      "Type" : "Number"
    },
    "ESEBSIOPS" : {
      "Type" : "Number"
    },
    "ESEBSType" : {
      "Type" : "String"
    },
    "ESInstanceCount" : {
      "Type" : "Number"
    },
    "ESDedicatedMasterEnabled" : {
      "Type" : "String"
    },
    "ESDedicatedMasterCount" : {
      "Type" : "Number"
    },
    "ESDedicatedMasterType" : {
      "Type" : "String"
    },
    "ESZoneAwarenessEnabled" : {
      "Type" : "String"
    },
    "ESSnapshotHour" : {
      "Type" : "Number"
    }
  },
  "Conditions" : {
    "ESEBSEnabled" : { "Fn::Equals" : [{ "Ref" : "ESUseEBS" }, "true"]},
    "ESEBSUseIOPS" : { "Fn::And" : [{ "Fn::Equals" : [{ "Ref" : "ESUseEBS" }, "true" ]}, { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "ESEBSIOPS" },0]}]}]},
    "ESUseDedicatedMaster" : { "Fn::Equals" : [{ "Ref" : "ESDedicatedMasterEnabled" }, "true" ]}
  },
  "Resources" : {
    "Kinesis" : {
     "Type" : "AWS::Kinesis::Stream",
     "Properties" : {
        "ShardCount" : { "Ref" : "KinesisShardCount" },
        "Tags" : [
          {% for tag in tags.keys() %}
            {
              "Key" : "{{ tag }}",
              "Value" : "{{ tags[tag] }}"
            }
            {% if not loop.last %}, {% endif %}
          {% endfor %}
        ]
      }
    },
    "ElasticSearch" : {
      "Type" : "AWS::Elasticsearch::Domain",
      "Properties" : {
        "DomainName" : { "Ref" : "DomainName" },
        "SnapshotOptions" : {
          "AutomatedSnapshotStartHour" : { "Ref" : "ESSnapshotHour" }
        },
        "ElasticsearchClusterConfig" : {
          "InstanceType" : { "Ref" : "ESInstanceType"},
          "InstanceCount" : { "Ref" : "ESInstanceCount" },
          "DedicatedMasterEnabled" : { "Ref" : "ESDedicatedMasterEnabled" },
          "DedicatedMasterType" : {
            "Fn::If" : [
              "ESUseDedicatedMaster",
              { "Ref" : "ESDedicatedMasterType" },
              { "Ref" : "AWS::NoValue" }
            ]
          },
          "ZoneAwarenessEnabled" : { "Ref" : "ESZoneAwarenessEnabled" }
        },
        "EBSOptions" : {
          "EBSEnabled" : { "Ref" : "ESUseEBS" },
          "VolumeSize" : {
            "Fn::If" : [
              "ESEBSEnabled",
              { "Ref" : "ESEBSSize" },
              { "Ref" : "AWS::NoValue" }
            ]
          },
          "VolumeType" : {
            "Fn::If" : [
              "ESEBSEnabled",
              { "Ref" : "ESEBSType" },
              {"Ref" : "AWS::NoValue"}
            ]
          },
          "Iops" : {
            "Fn::If" : [
              "ESEBSUseIOPS",
              { "Ref" : "ESEBSIOPS" },
              {"Ref" : "AWS::NoValue"}
            ]
          }
        },
        "Tags" : [
          {% for tag in tags.keys() %}
            {
              "Key" : "{{ tag }}",
              "Value" : "{{ tags[tag] }}"
            }
            {% if not loop.last %}, {% endif %}
          {% endfor %}
        ]
      }
    },
    "CloudWatchKinesisRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "Path" : "/logging/",
        "AssumeRolePolicyDocument" : {
          "Statement": [
          {% for region in elasticsearch_source_log_regions %}
            {
              "Effect": "Allow",
              "Principal": { "Service": "logs.{{ region }}.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
            {% if not loop.last %}, {% endif %}
          {% endfor %}
          ]
        }
      }
    },
    "ESPublisherLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties":{
        "Path": "/logging/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "lambda.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ESPublisherPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "es:*"
                  ],
                  "Resource":  { "Fn::GetAtt" : [ "ElasticSearch", "DomainArn" ] }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kinesis:DescribeStream",
                    "kinesis:ListStreams",
                    "kinesis:GetShardIterator",
                    "kinesis:GetRecords"
                  ],
                  "Resource": [
                    { "Fn::GetAtt" : [ "Kinesis", "Arn" ] }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ESPublisherLambda" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "S3Bucket": { "Ref" : "ESPublisherLambdaS3Bucket" },
          "S3Key": {"Ref": "ESPublisherLambdaS3Object" }
        },
        "Description" : "Tool for publishing Kinesis logs to ElasticSearch.",
        "Handler" : "es_publisher.handler",
        "Role" : { "Fn::GetAtt": [ "ESPublisherLambdaRole", "Arn" ] },
        "Runtime" : "python2.7",
        "Timeout" : "100"
      }
    },
    "ESPublisherEventSourceMapping" : {
      "Type" : "AWS::Lambda::EventSourceMapping",
      "Properties" : {
        "BatchSize" : 1,
        "Enabled" : "true",
        "EventSourceArn" : { "Fn::GetAtt" : [ "Kinesis", "Arn" ] },
        "FunctionName" : { "Fn::GetAtt" : [ "ESPublisherLambda", "Arn" ] },
        "StartingPosition" : "LATEST"
      }
    }
  },
  "Outputs" : {
    "CWKinesisRoleARN" : {
      "Value": {
        "Fn::GetAtt" : [ "CloudWatchKinesisRole", "Arn" ]
      }
    },
    "CWKinesisRoleName" : {
      "Value" : { "Ref" : "CloudWatchKinesisRole" }
    },
    "CWKinesisARN" : {
      "Value" : {
        "Fn::GetAtt" : [ "Kinesis", "Arn"]
      }
    }
  }
}
